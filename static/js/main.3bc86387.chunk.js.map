{"version":3,"sources":["components/Header.js","components/Main.js","components/Footer.js","components/animatedBackground.js","App.js","index.js"],"names":["Header","react_default","a","createElement","id","randomWordArray","require","randomWords","bestScore","JSON","parse","localStorage","getItem","shuffleArray","array","i","length","j","Math","floor","random","_ref","Main","_useState","useState","_useState2","Object","slicedToArray","currentCards","setCurrentCards","_useState3","_useState4","selectedCards","setSelectedCards","_useState5","_useState6","isGameReady","setIsGameReady","_useState7","_useState8","score","setScore","startGame","children","currentScore","React","key","className","memoryCards","limit","cardData","push","name","cardClick","e","value","target","innerHTML","includes","setItem","stringify","concat","map","val","onClick","createMemoryCard","playGameScreen","showBestScore","startGameInstructions","startGameBtn","type","startGameScreen","useEffect","Footer","href","targer","AnimatedList","getRandomInt","max","shapeChildren","hw","shape","style","left","top","width","height","animationDuration","App","Fragment","animatedBackground","components_Header","components_Main","components_Footer","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.3bc86387.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () =>{\n    return(\n        <div id = 'header'>\n            Memory Game\n        </div>\n    );\n};\n\nexport default Header;","import React, { useEffect, useState } from \"react\";\nimport './styles/startGameScreen.css';\nimport './styles/playGameScreen.css';\n\n\nconst randomWords = require('random-words');\nlet randomWordArray = randomWords(50);\n\nlet bestScore = JSON.parse(localStorage.getItem(\"best-score\") || \"[0]\");;\n\n//Durstenfeld Shuffle\nfunction shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    \n    return array;\n}\n\nconst Main = () =>{\n    const [currentCards, setCurrentCards] = useState(5);\n    const [selectedCards, setSelectedCards] = useState([]);\n    const [isGameReady, setIsGameReady] = useState(0);\n    const [score, setScore] = useState(0);\n    \n    \n    const createMemoryCard = (limit) =>{\n        let cardData = [];\n        //creates the memory cards\n        for(let i = 0; i<limit; i++){\n            cardData.push({key:i, name:randomWordArray[i]});\n        }\n        \n        \n        cardData= shuffleArray(cardData);\n        \n\n        const cardClick = (e) =>{\n            \n            let value = e.target.innerHTML;\n            if (!selectedCards.includes(value)){\n                setScore(score + 1);\n                //lazy way to do this\n                setSelectedCards(selectedCards.concat(value));\n                if(currentCards < 50){\n                    setCurrentCards(currentCards + 1);\n                }\n                cardData = shuffleArray(cardData);\n            }else{\n                \n                if(score>bestScore) bestScore = score;\n                localStorage.setItem(\"best-score\",JSON.stringify(score));\n                startGame();     \n            }\n            \n        }\n        \n        const children = cardData.map((val)=>(\n            React.createElement('button', {className: 'memory-card', key: val[\"key\"], onClick: cardClick}, val['name'])\n        ));\n\n        if(score === 50){\n            bestScore = score;\n            localStorage.setItem(\"best-score\",JSON.stringify(score));\n            startGame();\n        }\n        return children;\n      }\n\n      const startGame = () =>{\n        setIsGameReady(!isGameReady);\n      }\n\n      const startGameScreen = () =>{\n        let startGameDesc = \"Rule: Don't click on the same word twice\";\n        const showBestScore =  React.createElement('div', {key: 'showBestScore', className: 'best-score'}, 'Your Best Score is: '+bestScore);\n        const startGameInstructions = React.createElement('div', {key: 'startGameDesc', className: 'start-game-desc'}, startGameDesc);\n        const startGameBtn = React.createElement('button', {key: 'startGameBtn', className: 'start-game-btn', onClick: startGame, type: 'button'}, 'Start Game');\n        const startGameScreen = React.createElement('div',{key:'start-game-screen', className: 'start-game-screen'},[showBestScore, startGameInstructions, startGameBtn]);\n        return startGameScreen;\n      }\n\n      const playGameScreen = () =>{\n        const currentScore = React.createElement('div', {key: 'score', className: 'current-score'}, 'Current Score: '+score);\n        const memoryCards = React.createElement('div', {key: 'memoryCards', className: 'memory-card-grid'}, createMemoryCard(currentCards));\n        const playGameScreen = React.createElement('div',{key:'playGameScreen', className: 'play-game-screen'},[currentScore, memoryCards]);\n        \n        return playGameScreen;\n        \n      }\n      \n      let children = isGameReady?playGameScreen():startGameScreen();\n      \n    \n  useEffect(()=>{\n    return () =>{\n        setCurrentCards(5);\n        setSelectedCards([]);\n        setScore(0);\n        randomWordArray = shuffleArray(randomWordArray);\n    };\n    \n  },[isGameReady]);\n  return(\n    React.createElement('div', {id: 'main'},children)\n    \n  );\n};\n\nexport default Main;\n","import React from \"react\";\n\nconst Footer = () =>{\n    return(\n        <div id = 'footer'>\n            <a href='https://www.github.com/nneddk' targer = '_blank'>\n             @nneddk\n            </a>\n        </div>\n    );\n};\n\nexport default Footer;","import React  from \"react\";\n\nconst AnimatedList = () =>{\n    function getRandomInt(max, floor) {\n        return Math.floor(Math.random() * max + floor);\n    }\n    const shapeChildren = [];\n    for(let i = 0; i<100; i++){\n        let hw = getRandomInt(5, 1)+'vmin'\n        const shape = React.createElement('li', {key: i+'al', style: {\n            left: getRandomInt(93, 0)+'vw',\n            top: getRandomInt(70, 10)+'vh',\n            width: hw,\n            height:hw,\n            animationDuration: getRandomInt(10,5)+'s'\n        }});\n        shapeChildren.push(shape);\n    }\n\n    return(\n        <ul className = 'shapes'>\n            {shapeChildren}\n        </ul>\n    );\n};\n\nexport default AnimatedList;","import React  from \"react\";\nimport Header from \"./components/Header\";\nimport Main from \"./components/Main\";\nimport Footer from \"./components/Footer\";\nimport AnimatedList from \"./components/animatedBackground\";\nimport './components/styles/App.css'\n\nconst App = () =>{\n\n  return(\n    <>\n      <AnimatedList/>\n      <Header/>\n      <Main/>\n      <Footer/>\n      \n      \n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}